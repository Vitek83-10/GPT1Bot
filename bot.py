import asyncio
import os
import logging
import aiohttp
from pyrogram import Client

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ Render
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
TARGET_CHAT_ID = os.getenv("TARGET_CHAT_ID")
AXIOM_API_KEY = os.getenv("AXIOM_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pyrogram-–∫–ª–∏–µ–Ω—Ç–∞
app = Client("my_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# ‚úÖ –ù–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π URL
AXIOM_URL = "https://api.axiom.trade/v1/tokens/pulse"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Axiom
async def fetch_axiom_data():
    headers = {
        "Authorization": f"Bearer {AXIOM_API_KEY}",
        "accept": "application/json"
    }

    async with aiohttp.ClientSession() as session:
        async with session.get(AXIOM_URL, headers=headers) as response:
            if response.status != 200:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Axiom API: {response.status}")
                return None
            return await response.json()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
async def check_axiom_tokens():
    logger.info("üü¢ Axiom –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    print("üü¢ Axiom –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞")  # –ë—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ Render –ª–æ–≥–∞—Ö

    data = await fetch_axiom_data()
    if not data:
        return

    tokens = data.get("tokens", [])
    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(tokens)}")

    for token in tokens:
        name = token.get("name", "Unknown")
        mc = token.get("marketCap", 0)
        liq = token.get("liquidity", 0)
        vol = token.get("volume", 0)

        # –ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if mc >= 90000 and liq >= 30000 and vol >= 80000:
            msg = (
                f"‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω:\n"
                f"Name: {name}\n"
                f"MC: ${mc:,}\n"
                f"Liquidity: ${liq:,}\n"
                f"Volume: ${vol:,}"
            )
            await app.send_message(chat_id=int(TARGET_CHAT_ID), text=msg)
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ç–æ–∫–µ–Ω—É: {name}")

# –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /status
@app.on_message()
async def handler(_, message):
    if message.text == "/status":
        await message.reply("ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á—ë–Ω.")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
async def main():
    await app.start()
    while True:
        try:
            await check_axiom_tokens()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ check_axiom_tokens: {e}")
        await asyncio.sleep(60)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(main())
