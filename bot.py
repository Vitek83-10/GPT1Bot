from pyrogram import Client, filters
from pyrogram.types import Message
import logging

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = 20234202
API_HASH = "fc0e099e810cbea903512acef8563b36"
BOT_TOKEN = "7537931821:AAFZnLwQbaXZ9QFY0QHx_oWArS0MneB7QkE"

app = Client("ViktorSignalBot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

@app.on_message(filters.command("start"))
async def start(client, message: Message):
    await message.reply("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

@app.on_message(filters.command("status"))
async def status(client, message: Message):
    await message.reply("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º.")

@app.on_message(filters.command("deploy"))
async def deploy(client, message: Message):
    await message.reply("üì° –ê–≤—Ç–æ–ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω.")

@app.on_message(filters.command("stop"))
async def stop(client, message: Message):
    await message.reply("‚õîÔ∏è –ê–≤—Ç–æ–ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

@app.on_message(filters.command("test"))
async def test(client, message: Message):
    await message.reply("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

@app.on_message(filters.command("metrics"))
async def metrics(client, message: Message):
    await message.reply("üìä –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n‚Ä¢ GT Score ‚â• 35\n‚Ä¢ Volume ‚â• 80K\n‚Ä¢ Liquidity ‚â• 30K –∏ —Ç.–¥.")

@app.on_message(filters.command("setmetrics"))
async def setmetrics(client, message: Message):
    await message.reply("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nGT=35, Volume=80K, Liquidity=30K")

@app.on_message(filters.command("ping"))
async def ping(client, message: Message):
    await message.reply("üì° –ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏!")

@app.on_message(filters.command("version"))
async def version(client, message: Message):
    await message.reply("üß† –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: v1.0")

@app.on_message(filters.command("help"))
async def help_command(client, message: Message):
    help_text = (
        "üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äì –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/status ‚Äì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
        "/deploy ‚Äì –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Ç–æ–∫\n"
        "/stop ‚Äì –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Ç–æ–∫\n"
        "/test ‚Äì –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –≤ –∫–∞–Ω–∞–ª\n"
        "/metrics ‚Äì –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã\n"
        "/setmetrics ‚Äì –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã\n"
        "/ping ‚Äì –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏\n"
        "/version ‚Äì –í–µ—Ä—Å–∏—è –±–æ—Ç–∞\n"
        "/help ‚Äì –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )
    await message.reply(help_text)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app.run()
